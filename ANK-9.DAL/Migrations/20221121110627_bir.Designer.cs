// <auto-generated />
using System;
using ANK_9.DAL.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ANK_9.DAL.Migrations
{
    [DbContext(typeof(ANK_9DiyetDbContext))]
    [Migration("20221121110627_bir")]
    partial class bir
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ANK_9.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Süt Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(163),
                            IsActive = true
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Et Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(168),
                            IsActive = true
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "KuruBaklagil Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(169),
                            IsActive = true
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Ekmek Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(170),
                            IsActive = true
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Sebze Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(171),
                            IsActive = true
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Meyve Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(172),
                            IsActive = true
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Yağ Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(172),
                            IsActive = true
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Tatlı Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(173),
                            IsActive = true
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Kuruyemiş Grubu",
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 871, DateTimeKind.Local).AddTicks(174),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ANK_9.Entities.Food", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("ANK_9.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<string>("UserTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateOn = new DateTime(2022, 11, 21, 14, 6, 26, 870, DateTimeKind.Local).AddTicks(8495),
                            Email = "adin@gmail.com",
                            IsActive = true,
                            Password = "admin123",
                            UserName = "admin",
                            UserTypes = "Admin"
                        });
                });

            modelBuilder.Entity("ANK_9.Entities.Food", b =>
                {
                    b.HasOne("ANK_9.Entities.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ANK_9.Entities.Category", b =>
                {
                    b.Navigation("Foods");
                });
#pragma warning restore 612, 618
        }
    }
}
